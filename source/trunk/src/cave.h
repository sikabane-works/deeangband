// cave.c
extern COODINATES distance(COODINATES y1, COODINATES x1, COODINATES y2, COODINATES x2);
extern bool is_trap(FEATURE_ID feat);
extern bool is_known_trap(cave_type *c_ptr);
extern bool is_closed_door(FEATURE_ID feat);
extern bool is_hidden_door(cave_type *c_ptr);
extern bool los(floor_type *floor_ptr, COODINATES y1, COODINATES x1, COODINATES y2, COODINATES x2);
extern void update_local_illumination(floor_type *floor_ptr, int y, int x);
extern bool creature_can_see_bold(creature_type *viewer_ptr, int y, int x);
extern bool cave_valid_bold(floor_type *floor_ptr, COODINATES y, COODINATES x);
extern bool no_lite(creature_type *creature_ptr);
extern void apply_default_feat_lighting(byte f_attr[F_LIT_MAX], byte f_char[F_LIT_MAX]);
extern void map_info(creature_type *watcher_ptr, int y, int x, byte *ap, char *cp, byte *tap, char *tcp);
extern void move_cursor_relative(int row, int col);
extern void print_rel(creature_type *creature_ptr, char c, byte a, int y, int x);
extern void note_spot(floor_type *floor_ptr, int y, int x);
extern void display_dungeon(creature_type *creature_ptr);
extern void lite_spot(floor_type *floor_ptr, int y, int x);
extern void prt_map(creature_type *creature_ptr);
extern void prt_path(creature_type *creature_ptr, COODINATES range, COODINATES y, COODINATES x);
extern void display_map(creature_type *creature_ptr, int *cy, int *cx);
extern void do_cmd_view_map(creature_type *creature_ptr);
extern void forget_lite(floor_type *floor_ptr);
extern void update_lite(creature_type *creature_ptr);
extern void forget_view(floor_type *floor_ptr);
extern void update_view(creature_type *creature_ptr);
extern void update_creature_lite(floor_type *floor_ptr);
extern void clear_creature_lite(floor_type *floor_ptr);
extern void delayed_visual_update(floor_type *floor_ptr);
extern void forget_flow(floor_type *floor_ptr);
extern void update_flow(creature_type *creature_ptr);
extern void update_smell(creature_type *creature_ptr);
extern void map_area(creature_type *creature_ptr, COODINATES range);
extern void wiz_lite(floor_type *floor_ptr, creature_type *creature_ptr, bool ninja);
extern void wiz_dark(floor_type *floor_ptr, creature_type *creature_ptr);
extern void cave_set_feat(floor_type *floor_ptr, COODINATES y, COODINATES x, FEATURE_ID feat);
extern FEATURE_ID conv_dungeon_feat(floor_type *floor_ptr, FEATURE_ID newfeat);
extern FEATURE_ID feat_state(floor_type *floor_ptr, FEATURE_ID feat, int action);
extern void cave_alter_feat(floor_type *floor_ptr, COODINATES y, COODINATES x, int action);
extern void remove_mirror(creature_type *creature_ptr, COODINATES y, COODINATES x);
extern bool is_mirror_grid(cave_type *c_ptr);
extern bool is_glyph_grid(cave_type *c_ptr);
extern bool is_explosive_rune_grid(cave_type *c_ptr);
extern void mmove2(COODINATES *y, COODINATES *x, COODINATES y1, COODINATES x1, COODINATES y2, COODINATES x2);
extern bool projectable(floor_type *floor_ptr, COODINATES range, COODINATES y1, COODINATES x1, COODINATES y2, COODINATES x2);
extern void scatter(floor_type *floor_ptr, COODINATES *yp, COODINATES *xp, COODINATES y, COODINATES x, int d, int mode);
extern void health_track(CREATURE_ID creature_idx);
extern void species_type_track(SPECIES_ID species_idx);
extern void object_kind_track(OBJECT_KIND_ID k_idx);
extern void disturb(creature_type *player_ptr, int stop_search, int flush_output);
extern void glow_deep_lava_and_bldg(floor_type *floor_ptr);
extern void connect_cave_to(cave_type *stair_ptr, FLOOR_ID floor_idx, COODINATES y, COODINATES x);
